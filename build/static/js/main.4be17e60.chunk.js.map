{"version":3,"sources":["queries.js","components/Authors.js","components/Books.js","components/NewBook.js","components/Notify.js","components/LoginForm.js","components/Recommend.js","components/RegisterForm.js","App.js","index.js"],"names":["AUTHOR_DETAILS","gql","BOOK_DETAILS","ALL_AUTHORS","ALL_BOOKS","CREATE_BOOK","SET_BIRTH","LOGIN","ME","BOOK_ADDED","CREATE_USER","Authors","setError","show","updateCacheWith","result","useQuery","useState","name","setName","born","setBorn","useMutation","onError","error","console","log","message","update","store","response","data","editAuthor","loading","names","allAuthors","map","a","label","value","bookCount","id","onSubmit","event","preventDefault","variables","onChange","target","n","parseInt","type","Books","genre","setGenre","useLazyQuery","findBooks","style","textAlign","allBooks","b","title","author","published","onClick","NewBook","setTitle","setAuthor","setPublished","genres","setGenres","addBook","createBook","concat","join","Notify","errorMessage","color","LoginForm","setToken","username","setUsername","password","setPassword","graphQLErrors","login","useEffect","token","localStorage","setItem","submit","Recommend","user","me","favouriteGenre","RegisterForm","setFavouriteGenre","createUser","App","page","setPage","setErrorMessage","client","useApolloClient","notify","setTimeout","addedBook","set","object","dataInStore","readQuery","query","includes","writeQuery","useSubscription","onSubscriptionData","subscriptionData","bookAdded","clear","resetStore","authLink","setContext","_","headers","getItem","authorization","httpLink","HttpLink","uri","credentials","wsLink","WebSocketLink","options","reconnect","splitLink","split","definition","getMainDefinition","kind","operation","ApolloClient","cache","InMemoryCache","link","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"gQAEMA,EAAiBC,YAAH,6GAQdC,EAAeD,YAAH,4LAgBLE,EAAcF,YAAH,uGAOtBD,GAGWI,EAAYH,YAAH,qKAMpBC,GAGWG,EAAcJ,YAAH,iUAYtBC,GAGWI,EAAYL,YAAH,oKAMpBD,GAIWO,EAAQN,YAAH,oKAOLO,EAAKP,YAAH,8GAUFQ,EAAaR,YAAH,uFAMrBC,GAGWQ,EAAcT,YAAH,sR,OCRTU,EAlFC,SAAC,GAAwC,IAAD,IAArCC,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,gBACzBC,EAASC,YAASb,GACxB,EAA0Bc,mBAAS,IAAnC,mBAAQC,EAAR,KAAcC,EAAd,KACA,EAA0BF,mBAAS,IAAnC,mBAAQG,EAAR,KAAcC,EAAd,KAEA,EAAuBC,YAAYhB,EAAW,CACtCiB,QAAS,SAACC,GACNC,QAAQC,IAAIF,GACZZ,EAASY,EAAMG,UAEnBC,OAAQ,SAACC,EAAOC,GACZhB,EAAgBgB,EAASC,KAAKC,eANlCA,EAAR,oBAmBA,GAAIjB,EAAOkB,QACP,OAAO,6CAGX,IAAKpB,EACD,OAAO,KAEXY,QAAQC,IAAIX,GACZ,IAAMmB,EAAK,UAAGnB,EAAOgB,YAAV,aAAG,EAAaI,WAAWC,KAAI,SAAAC,GACtC,MAAO,CACHC,MAAOD,EAAEnB,KACTqB,MAAOF,EAAEnB,SAKjB,OAFAO,QAAQC,IAAIQ,GAGR,gCACI,yCACA,gCACI,kCACI,+BACI,uBACA,sCACA,0CAJR,UAMKnB,EAAOgB,YANZ,aAMK,EAAaI,WAAWC,KAAI,SAAAC,GAAC,OAC1B,+BACI,6BAAKA,EAAEnB,OACP,6BAAKmB,EAAEjB,OACP,6BAAKiB,EAAEG,cAHFH,EAAEI,YAQxB,gCACC,gDACA,uBAAMC,SA9CC,SAACC,GACRA,EAAMC,iBAENZ,EAAW,CAAEa,UAAW,CAAE3B,OAAME,UAEhCD,EAAQ,IACRE,EAAQ,KAwCR,UACJ,8BACI,wBAAQkB,MAAOrB,EAAM4B,SAAU,gBAAEC,EAAF,EAAEA,OAAF,OAAc5B,EAAQ4B,EAAOR,QAA5D,gBACCL,QADD,IACCA,OADD,EACCA,EAAOE,KAAI,SAACY,GAAD,OACR,wBAAsBT,MAAOS,EAAET,MAA/B,SAAuCS,EAAEV,OAA5BU,EAAEV,cAIvB,uCAEI,uBAAOC,MAAOnB,EACd0B,SAAU,gBAAEC,EAAF,EAAEA,OAAF,OAAc1B,EAAQ4B,SAASF,EAAOR,MAAO,WAG3D,wBAAQW,KAAK,SAAb,qC,QCoBOC,EA/FD,SAAC,GAAuB,IAAD,EAApBvC,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,KACvB,EAA0BI,mBAAS,IAAnC,mBAAOmC,EAAP,KAAcC,EAAd,KACA,EAA4BC,YAAalD,EAAW,CAChDmB,QAAS,SAACC,GACNC,QAAQC,IAAIF,GACZZ,EAASY,EAAMG,YAHvB,mBAAO4B,EAAP,KAAkBxC,EAAlB,KASA,OAFAU,QAAQC,IAAIX,GAERA,EAAOkB,QACA,6CAGNpB,EAMD,gCACI,uCADJ,YAEa,iCAASuC,IAClB,gCACI,kCACI,qBAAII,MAAO,CAAEC,UAAW,QAAxB,UACI,uCACA,wCACA,8CAJR,UAMK1C,EAAOgB,YANZ,aAMK,EAAa2B,SAAStB,KAAI,SAAAuB,GAAC,aACxB,+BACI,6BAAKA,EAAEC,QACP,uCAAKD,EAAEE,cAAP,aAAK,EAAU3C,OACf,6BAAKyC,EAAEG,cAHFH,EAAElB,YAQnC,gCACA,wBAAQsB,QAAS,WACVV,EAAS,IACTE,EAAU,KAFjB,iBAIG,wBAAQQ,QAAS,WACbV,EAAS,IACTA,EAAS,eACTE,EAAU,CAAEV,UAAW,CAACO,MAAOA,MAHnC,yBAKC,wBAAQW,QAAS,WACdV,EAAS,IACTA,EAAS,UACTE,EAAU,CAAEV,UAAW,CAACO,MAAOA,MAHlC,oBAKA,wBAAQW,QAAS,WACdV,EAAS,IACTA,EAAS,WACTE,EAAU,CAAEV,UAAW,CAACO,MAAOA,MAHlC,qBAKA,wBAAQW,QAAS,WACdV,EAAS,IACTA,EAAS,SACTE,EAAU,CAAEV,UAAW,CAACO,MAAOA,MAHlC,mBAKA,wBAAQW,QAAS,WACdV,EAAS,IACTA,EAAS,YACTE,EAAU,CAAEV,UAAW,CAACO,MAAOA,MAHlC,sBAKA,wBAAQW,QAAS,WACdV,EAAS,IACTA,EAAS,UACTE,EAAU,CAAEV,UAAW,CAACO,MAAOA,MAHlC,oBAKA,wBAAQW,QAAS,WACdV,EAAS,IACTA,EAAS,SACTE,EAAU,CAAEV,UAAW,CAACO,MAAOA,MAHlC,mBAKA,wBAAQW,QAAS,WACdV,EAAS,IACTA,EAAS,cACTE,EAAU,CAAEV,UAAW,CAACO,MAAOA,MAHlC,wBAKA,wBAAQW,QAAS,WACdV,EAAS,IACTA,EAAS,WACTE,EAAU,CAAEV,UAAW,CAACO,MAAOA,MAHlC,2BArEW,MCoEAY,EArFC,SAAC,GAAwC,IAAtCnD,EAAqC,EAArCA,KAAMD,EAA+B,EAA/BA,SAAUE,EAAqB,EAArBA,gBACnC,EAA0BG,mBAAS,IAAnC,mBAAO2C,EAAP,KAAcK,EAAd,KACA,EAA4BhD,mBAAS,IAArC,mBAAO4C,EAAP,KAAeK,EAAf,KACA,EAAkCjD,mBAAS,IAA3C,mBAAO6C,EAAP,KAAkBK,EAAlB,KACA,EAAwBlD,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOmC,EAAP,KAAcC,EAAd,KACA,EAA4BpC,mBAAS,IAArC,mBAAOmD,EAAP,KAAeC,EAAf,KAEA,EAAuB/C,YAAYjB,EAAa,CAC5CkB,QAAS,SAACC,GACNC,QAAQC,IAAIF,GACZZ,EAASY,EAAMG,UAEnBC,OAAQ,SAACC,EAAOC,GACbhB,EAAgBgB,EAASC,KAAKuC,YAN7BC,EAAR,oBAUA,IAAK1D,EACD,OAAO,KAuBP,OAFJY,QAAQC,IAAIoC,GAGJ,gCACI,0CACD,uBAAMpB,SAtBF,SAACC,GACZA,EAAMC,iBAENnB,QAAQC,IAAI,eACZ6C,EAAW,CAAE1B,UAAW,CAAEe,QAAOC,SAAQC,YAAWM,SAAQhD,UAC5D6C,EAAS,IACTC,EAAU,IACVC,EAAa,IACb9C,EAAQ,IACRgC,EAAS,IACTgB,EAAU,KAYH,UACI,wCAEI,uBAAO9B,MAAOqB,EACdd,SAAU,gBAAEC,EAAF,EAAEA,OAAF,OAAckB,EAASlB,EAAOR,aAG5C,yCAEI,uBAAOA,MAAOsB,EACdf,SAAU,gBAAEC,EAAF,EAAEA,OAAF,OAAcmB,EAAUnB,EAAOR,aAG7C,4CAEI,uBAAOA,MAAOuB,EACdhB,SAAU,gBAAEC,EAAF,EAAEA,OAAF,OAAcoB,EAAalB,SAASF,EAAOR,MAAO,WAGhE,mDAEI,uBAAOA,MAAOnB,EACd0B,SAAU,gBAAEC,EAAF,EAAEA,OAAF,OAAc1B,EAAQ4B,SAASF,EAAOR,MAAO,WAG3D,gCACI,uBAAOA,MAAOa,EACdN,SAAU,gBAAEC,EAAF,EAAEA,OAAF,OAAcM,EAASN,EAAOR,UAExC,wBAAQwB,QAtCV,WACbM,EAAUD,EAAOI,OAAOpB,IACxBC,EAAS,KAoCiCH,KAAK,SAAhC,0BAEJ,2CACYkB,EAAOK,KAAK,QAExB,wBAAQvB,KAAK,SAAb,gCCpEAwB,EAdA,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACb,OAAKA,EAOD,qBAAKnB,MAAO,CAAEoB,MAAO,OAArB,SACKD,IAPE,M,yBC4DAE,EA3DG,SAAC,GAAiC,IAA/BjE,EAA8B,EAA9BA,SAAUkE,EAAoB,EAApBA,SAAUjE,EAAU,EAAVA,KACrC,EAAgCI,mBAAS,IAAzC,mBAAO8D,EAAP,KAAiBC,EAAjB,KACA,EAAgC/D,mBAAS,IAAzC,mBAAOgE,EAAP,KAAiBC,EAAjB,KAEA,EAA0B5D,YAAYf,EAAO,CACzCgB,QAAS,SAACC,GACNZ,EAASY,EAAM2D,cAAc,GAAGxD,YAFxC,mBAAQyD,EAAR,KAAerE,EAAf,KAgBA,GAVAsE,qBAAU,WACN,GAAKtE,EAAOgB,KAAO,CACf,IAAMuD,EAAQvE,EAAOgB,KAAKqD,MAAM7C,MAChCuC,EAASQ,GACTC,aAAaC,QAAQ,iBAAkBF,MAG5C,CAACvE,EAAOgB,OAGPhB,EAAOkB,QACP,OAAO,6CAIX,IAAKpB,EACD,OAAO,KAGX,IAAM4E,EAAM,uCAAG,WAAM9C,GAAN,SAAAN,EAAA,sDACXM,EAAMC,iBAENwC,EAAM,CAAEvC,UAAW,CAACkC,WAAUE,cAHnB,2CAAH,sDAMZ,OACI,gCACI,uCACA,uBAAMvC,SAAU+C,EAAhB,UACI,2CAEI,uBACAlD,MAAOwC,EACPjC,SAAU,gBAAEC,EAAF,EAAEA,OAAF,OAAciC,EAAYjC,EAAOR,aAG/C,2CAEI,uBACAA,MAAO0C,EACPnC,SAAU,gBAAEC,EAAF,EAAEA,OAAF,OAAcmC,EAAYnC,EAAOR,aAG/C,wBAAQW,KAAK,SAAb,0B,iBCPDwC,EA9CG,SAAC,GAAsB,IAAD,MAApB9E,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,KACpB8E,EAAO3E,YAASR,GACtBiB,QAAQC,IAAIiE,EAAK5D,MACjB,IAAMqB,EAAK,UAAGuC,EAAK5D,YAAR,iBAAG,EAAW6D,UAAd,aAAG,EAAeC,eACvB9E,EAASC,YAASZ,EAAW,CAC/ByC,UAAW,CAAEO,SACb7B,QAAS,SAACC,GACNC,QAAQC,IAAIF,GACZZ,EAASY,EAAMG,YAIvB,OAAIZ,EAAOkB,QACA,6CAGNpB,EAOD,gCACI,iDADJ,iCAEkC,iCAASuC,IACvC,gCACI,kCACI,qBAAII,MAAO,CAAEC,UAAW,QAAxB,UACI,uCACA,wCACA,8CAJR,UAMK1C,EAAOgB,YANZ,aAMK,EAAa2B,SAAStB,KAAI,SAAAuB,GAAC,aACxB,+BACI,6BAAKA,EAAEC,QACP,uCAAKD,EAAEE,cAAP,aAAK,EAAU3C,OACf,6BAAKyC,EAAEG,cAHFH,EAAElB,eAjBpB,MC0CAqD,EA3DM,SAAC,GAAuB,IAArBlF,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,KAC9B,EAAgCI,mBAAS,IAAzC,mBAAO8D,EAAP,KAAiBC,EAAjB,KACA,EAAgC/D,mBAAS,IAAzC,mBAAOgE,EAAP,KAAiBC,EAAjB,KACA,EAA4CjE,mBAAS,IAArD,mBAAO4E,EAAP,KAAuBE,EAAvB,KAGA,EAA+BzE,YAAYZ,EAAa,CACpDa,QAAS,SAACC,GACNZ,EAASY,EAAM2D,cAAc,GAAGxD,YAFxC,mBAAQqE,EAAR,KAOA,GAPA,KAOW/D,QACP,OAAO,6CAIX,IAAKpB,EACD,OAAO,KAGX,IAAM4E,EAAM,uCAAG,WAAM9C,GAAN,SAAAN,EAAA,sDACXM,EAAMC,iBAENoD,EAAW,CAAEnD,UAAW,CAACkC,WAAUE,WAAUY,oBAHlC,2CAAH,sDAMZ,OACI,gCACI,0CACA,uBAAMnD,SAAU+C,EAAhB,UACI,2CAEI,uBACAlD,MAAOwC,EACPjC,SAAU,gBAAEC,EAAF,EAAEA,OAAF,OAAciC,EAAYjC,EAAOR,aAG/C,2CAEI,uBACAA,MAAO0C,EACPnC,SAAU,gBAAEC,EAAF,EAAEA,OAAF,OAAcmC,EAAYnC,EAAOR,aAG/C,kDAEI,uBACAA,MAAOsD,EACP/C,SAAU,gBAAEC,EAAF,EAAEA,OAAF,OAAcgD,EAAkBhD,EAAOR,aAGrD,wBAAQW,KAAK,SAAb,6BC8CD+C,EA5FH,WACV,MAAwBhF,mBAAS,WAAjC,mBAAOiF,EAAP,KAAaC,EAAb,KACA,EAAwClF,mBAAS,MAAjD,mBAAO0D,EAAP,KAAqByB,EAArB,KACA,EAA0BnF,mBAAS,MAAnC,mBAAOqE,EAAP,KAAcR,EAAd,KACMuB,EAASC,cAETC,EAAS,SAAC5E,GACdyE,EAAgBzE,GAChB6E,YAAW,WACTJ,EAAgB,QACf,MAIEtF,EAAkB,SAAC2F,GAExB,IAAoBC,EAAKC,EAElBC,EAAcP,EAAOQ,UAAU,CAAEC,MAAO1G,IAF3BsG,EAGLE,EAAYlD,SAHFiD,EAGYF,EAHDC,EAAItE,KAAI,SAAAuB,GAAC,OAAIA,EAAElB,MAAIsE,SAASJ,EAAOlE,KAItE4D,EAAOW,WAAW,CAChBF,MAAO1G,EACP2B,KAAM,CAAE2B,SAAWkD,EAAYlD,SAASc,OAAOiC,OAMpDQ,YAAgBxG,EAAY,CAC1ByG,mBAAoB,YAA2B,IACvCT,EADsC,EAAvBU,iBACcpF,KAAKqF,UACxCb,EAAO,GAAD,OAAIE,EAAU7C,MAAd,WACN9C,EAAgB2F,MAUpB,OACE,gCACC,gCACG,wBAAQ1C,QAAS,kBAAMoC,EAAQ,YAA/B,qBACA,wBAAQpC,QAAS,kBAAMoC,EAAQ,UAA/B,mBACA,wBAAQpC,QAAS,kBAAMoC,EAAQ,aAA/B,sBACW,OAAVb,EAAkB,wBAAQvB,QAAS,kBAAMoC,EAAQ,UAA/B,mBAChB,gCAAK,wBAAQpC,QAAS,kBAAMoC,EAAQ,QAA/B,sBACR,wBAAQpC,QAAS,kBAAMoC,EAAQ,cAA/B,uBACA,wBAAQpC,QAfG,WACbe,EAAS,MACTS,aAAa8B,QACbhB,EAAOiB,cAYL,0BAGF,8BACE,cAAC,EAAD,CAAQ3C,aAAcA,MAExB,cAAC,EAAD,CACE9D,KAAe,YAATqF,EACNtF,SAAU2F,IAGZ,cAAC,EAAD,CACE1F,KAAe,UAATqF,EACNtF,SAAU2F,IAGZ,cAAC,EAAD,CACE1F,KAAe,QAATqF,EACNtF,SAAU2F,EACVzF,gBAAiBA,IAGnB,cAAC,EAAD,CACID,KAAe,UAATqF,EACNpB,SAAUA,EACVlE,SAAU2F,IAGd,cAAC,EAAD,CACI1F,KAAe,aAATqF,EACNtF,SAAU2F,IAGd,cAAC,EAAD,CACE1F,KAAe,cAATqF,EACNtF,SAAU2F,Q,mECtFZgB,GAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAC1BpC,EAAQC,aAAaoC,QAAQ,kBACnC,MAAO,CACLD,QAAQ,2BACHA,GADE,IAELE,cAAetC,EAAK,iBAAaA,GAAU,WAM3CuC,GAAW,IAAIC,IAAS,CAAEC,IAAK,WAAYC,YAAa,YAGxDC,GAAS,IAAIC,KAAc,CAC/BH,IAAI,8BACJI,QAAS,CACPC,WAAW,KAITC,GAAYC,aAChB,YAAgB,IAAbxB,EAAY,EAAZA,MACKyB,EAAaC,YAAkB1B,GACrC,MACsB,wBAApByB,EAAWE,MACc,iBAAzBF,EAAWG,YAGfT,GACAV,GAAS/C,OAAOqD,KAGZxB,GAAS,IAAIsC,IAAa,CAC9BC,MAAO,IAAIC,IACXC,KAAMT,KAIRU,IAASC,OACP,cAACC,EAAA,EAAD,CAAgB5C,OAAQA,GAAxB,SACE,cAAC,EAAD,MAEF6C,SAASC,eAAe,W","file":"static/js/main.4be17e60.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\r\n\r\nconst AUTHOR_DETAILS = gql`\r\nfragment AuthorDetails on Author{\r\n    name\r\n    born\r\n    id\r\n    bookCount\r\n}\r\n`\r\nconst BOOK_DETAILS = gql`\r\nfragment BookDetails on Book {\r\n    title\r\n    published\r\n    genres\r\n    author{\r\n        name\r\n        id\r\n        born\r\n        bookCount\r\n    }\r\n    id\r\n}\r\n`\r\n\r\n\r\nexport const ALL_AUTHORS = gql`\r\nquery {\r\n    allAuthors {\r\n       ...AuthorDetails\r\n       \r\n    }\r\n}\r\n${AUTHOR_DETAILS}\r\n`\r\n\r\nexport const ALL_BOOKS = gql`\r\nquery findBooks($author: String, $genre: String){\r\n    allBooks(author: $author, genre: $genre) {\r\n        ...BookDetails\r\n    }\r\n}\r\n${BOOK_DETAILS}\r\n`\r\n\r\nexport const CREATE_BOOK = gql`\r\nmutation createBook($title: String!, $author: String!, $published: Int!, $genres: [String!], $born: Int) {\r\n    addBook(\r\n        title: $title\r\n        author: $author\r\n        published: $published\r\n        born: $born\r\n        genres: $genres\r\n    ) {\r\n       ...BookDetails\r\n    }\r\n}\r\n${BOOK_DETAILS}\r\n`\r\n\r\nexport const SET_BIRTH = gql`\r\nmutation editAuthor($name: String!, $born: Int!) {\r\n    editAuthor(name: $name, born: $born) {\r\n        ...AuthorDetails\r\n    }\r\n}\r\n${AUTHOR_DETAILS}\r\n`\r\n\r\n\r\nexport const LOGIN = gql`\r\nmutation login($username: String!, $password: String!){\r\n    login(username: $username, password: $password){\r\n        value\r\n    }\r\n}\r\n`\r\nexport const ME = gql`\r\nquery {\r\n    me{\r\n        id\r\n        username\r\n        favouriteGenre\r\n    }\r\n}\r\n`\r\n\r\nexport const BOOK_ADDED = gql`\r\nsubscription {\r\nbookAdded {\r\n    ...BookDetails\r\n}\r\n}\r\n${BOOK_DETAILS}\r\n`\r\n\r\nexport const CREATE_USER = gql`\r\nmutation createUser($username: String!, $password: String!, $favouriteGenre: String!){\r\n    createUser(username: $username, password: $password, favouriteGenre: $favouriteGenre){\r\n        username\r\n        password\r\n        favouriteGenre\r\n    }\r\n}\r\n`","import React, { useState } from 'react'\r\nimport { useQuery, useMutation } from '@apollo/client'\r\nimport { SET_BIRTH, ALL_AUTHORS } from '../queries'\r\n\r\n\r\n\r\nconst Authors = ({ setError, show, updateCacheWith}) => {\r\n    const result = useQuery(ALL_AUTHORS)\r\n    const [ name, setName ] = useState('')\r\n    const [ born, setBorn ] = useState('')\r\n\r\n    const [ editAuthor ] = useMutation(SET_BIRTH, {\r\n            onError: (error) => {\r\n                console.log(error)\r\n                setError(error.message)\r\n            },\r\n            update: (store, response) => {\r\n                updateCacheWith(response.data.editAuthor)\r\n             }\r\n        })\r\n\r\n    const submit = (event) => {\r\n            event.preventDefault()\r\n\r\n            editAuthor({ variables: { name, born }})\r\n\r\n            setName('')\r\n            setBorn('')\r\n        }\r\n\r\n    if (result.loading) {\r\n        return <div>loading...</div>\r\n    }\r\n\r\n    if (!show) {\r\n        return null\r\n    }\r\n    console.log(result)\r\n    const names = result.data?.allAuthors.map(a => {\r\n        return {\r\n            label: a.name,\r\n            value: a.name\r\n        }\r\n    })\r\n    console.log(names)\r\n\r\n    return (\r\n        <div>\r\n            <h2>Authors</h2>\r\n            <table>\r\n                <tbody>\r\n                    <tr>\r\n                        <th></th>\r\n                        <th>born</th>\r\n                        <th>books</th>\r\n                    </tr>\r\n                    {result.data?.allAuthors.map(a=>\r\n                        <tr key={a.id}>\r\n                            <td>{a.name}</td>\r\n                            <td>{a.born}</td>\r\n                            <td>{a.bookCount}</td>\r\n                            </tr>\r\n                            )}\r\n                </tbody>\r\n            </table>\r\n           <div>\r\n            <h2>Set Birth Year</h2>\r\n            <form onSubmit={submit}>\r\n        <div>\r\n            <select value={name} onChange={({target}) => setName(target.value)}>\r\n            {names?.map((n) => (\r\n                <option key={n.label} value={n.value}>{n.label}</option>\r\n            ))}\r\n            </select>\r\n        </div>\r\n        <div>\r\n            born\r\n            <input value={born}\r\n            onChange={({target}) => setBorn(parseInt(target.value, 10))}\r\n            />\r\n        </div>\r\n        <button type='submit'>update author</button>\r\n            </form>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Authors\r\n","import React, { useState } from 'react'\r\nimport { useLazyQuery } from '@apollo/client'\r\nimport { ALL_BOOKS } from '../queries'\r\n\r\n\r\n\r\nconst Books = ({ setError, show}) => {\r\n    const [genre, setGenre] = useState('')\r\n    const [findBooks, result] = useLazyQuery(ALL_BOOKS, {\r\n        onError: (error) => {\r\n            console.log(error)\r\n            setError(error.message)\r\n        }\r\n    })\r\n    \r\n    console.log(result)\r\n\r\n    if (result.loading) {\r\n        return <div>loading...</div>\r\n    }\r\n\r\n    if (!show) {\r\n        return null\r\n    }\r\n\r\n    \r\n    return (\r\n        <div>\r\n            <h2>Books</h2>\r\n            in genre <strong>{genre}</strong>\r\n            <table>\r\n                <tbody>\r\n                    <tr style={{ textAlign: \"left\" }}>\r\n                        <th>Title</th>\r\n                        <th>Author</th>\r\n                        <th>Published</th>\r\n                    </tr>\r\n                    {result.data?.allBooks.map(b =>\r\n                        <tr key={b.id}>\r\n                            <td>{b.title}</td>\r\n                            <td>{b.author?.name}</td>\r\n                            <td>{b.published}</td>\r\n                        </tr>\r\n                        )}\r\n                </tbody>\r\n            </table>\r\n<div>\r\n<button onClick={() => {\r\n       setGenre('')\r\n       findBooks({})\r\n       }} >all</button>\r\n   <button onClick={() => {\r\n       setGenre('')\r\n       setGenre(\"refactoring\")\r\n       findBooks({ variables: {genre: genre }})\r\n       }} >refactoring</button>\r\n    <button onClick={() => {\r\n       setGenre('')\r\n       setGenre(\"design\")\r\n       findBooks({ variables: {genre: genre }})\r\n       }} >design</button>\r\n    <button onClick={() => {\r\n       setGenre('')\r\n       setGenre(\"classic\")\r\n       findBooks({ variables: {genre: genre }})\r\n       }} >classic</button>\r\n    <button onClick={() => {\r\n       setGenre('')\r\n       setGenre(\"crime\")\r\n       findBooks({ variables: {genre: genre }})\r\n       }} >crime</button>\r\n    <button onClick={() => {\r\n       setGenre('')\r\n       setGenre(\"patterns\")\r\n       findBooks({ variables: {genre: genre }})\r\n       }} >patterns</button>\r\n    <button onClick={() => {\r\n       setGenre('')\r\n       setGenre(\"baking\")\r\n       findBooks({ variables: {genre: genre }})\r\n       }} >baking</button>\r\n    <button onClick={() => {\r\n       setGenre('')\r\n       setGenre(\"agile\")\r\n       findBooks({ variables: {genre: genre }})\r\n       }} >agile</button>\r\n    <button onClick={() => {\r\n       setGenre('')\r\n       setGenre(\"revolution\")\r\n       findBooks({ variables: {genre: genre }})\r\n       }} >revolution</button>\r\n    <button onClick={() => {\r\n       setGenre('')\r\n       setGenre(\"testing\")\r\n       findBooks({ variables: {genre: genre }})\r\n       }} >testing</button>\r\n</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Books\r\n","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/client'\r\nimport { CREATE_BOOK } from '../queries'\r\n\r\n\r\nconst NewBook = ({ show, setError, updateCacheWith}) => {\r\nconst [title, setTitle] = useState('')\r\nconst [author, setAuthor] = useState('')\r\nconst [published, setPublished] = useState('')\r\nconst [born, setBorn] = useState('')\r\nconst [genre, setGenre] = useState('')\r\nconst [genres, setGenres] = useState([])\r\n\r\nconst [ createBook ] = useMutation(CREATE_BOOK, {\r\n    onError: (error) => {\r\n        console.log(error)\r\n        setError(error.message)\r\n    },\r\n    update: (store, response) => {\r\n       updateCacheWith(response.data.addBook)\r\n    }\r\n})\r\n\r\nif (!show) {\r\n    return null\r\n}\r\n\r\n\r\nconst submit = (event) => {\r\n    event.preventDefault()\r\n\r\n    console.log('add book...')\r\n    createBook({ variables: { title, author, published, genres, born}})\r\n    setTitle('')\r\n    setAuthor('')\r\n    setPublished('')\r\n    setBorn('')\r\n    setGenre('')\r\n    setGenres([])\r\n}\r\n\r\nconst addGenre = () => {\r\n    setGenres(genres.concat(genre))\r\n    setGenre('')\r\n}\r\nconsole.log(published)\r\n\r\n    return (\r\n        <div>\r\n            <h2>Add Book</h2>\r\n           <form onSubmit={submit}>\r\n               <div>\r\n                   title \r\n                   <input value={title}\r\n                   onChange={({target}) => setTitle(target.value)}\r\n                   />\r\n               </div>\r\n               <div>\r\n                   author \r\n                   <input value={author}\r\n                   onChange={({target}) => setAuthor(target.value)}\r\n                   />\r\n               </div>\r\n               <div>\r\n                   published\r\n                   <input value={published} \r\n                   onChange={({target}) => setPublished(parseInt(target.value, 10))}\r\n                   />\r\n               </div>\r\n               <div>\r\n                   Author birthdate\r\n                   <input value={born} \r\n                   onChange={({target}) => setBorn(parseInt(target.value, 10))}\r\n                   />\r\n               </div>\r\n               <div>\r\n                   <input value={genre}\r\n                   onChange={({target}) => setGenre(target.value)}\r\n                   />\r\n                   <button onClick={addGenre} type='button'>add genre</button>\r\n               </div>\r\n               <div>\r\n                  genres: {genres.join(' ')}\r\n               </div>\r\n               <button type='submit'>create book</button>\r\n               </form> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewBook\r\n","import React from 'react'\r\n\r\nconst Notify = ({errorMessage}) => {\r\n    if (!errorMessage) {\r\n        return null\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div style={{ color: \"red\"}}>\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notify\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useMutation } from '@apollo/client'\r\nimport { LOGIN } from '../queries'\r\n\r\n\r\nconst LoginForm = ({ setError, setToken, show}) => {\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    const [ login, result ] = useMutation(LOGIN, {\r\n        onError: (error) => {\r\n            setError(error.graphQLErrors[0].message)\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        if ( result.data ) {\r\n            const token = result.data.login.value\r\n            setToken(token)\r\n            localStorage.setItem('bookuser-token', token)\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [result.data])\r\n\r\n\r\n    if (result.loading) {\r\n        return <div>loading...</div>\r\n    }\r\n\r\n    \r\n    if (!show) {\r\n        return null\r\n    }\r\n\r\n    const submit = async(event) => {\r\n        event.preventDefault()\r\n\r\n        login({ variables: {username, password} })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Login</h2>\r\n            <form onSubmit={submit}>\r\n                <div>\r\n                    username\r\n                    <input\r\n                    value={username}\r\n                    onChange={({target}) => setUsername(target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    password\r\n                    <input\r\n                    value={password}\r\n                    onChange={({target}) => setPassword(target.value)}\r\n                    />\r\n                </div>\r\n                <button type='submit'>login</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm\r\n","import React from 'react'\r\nimport { useQuery } from '@apollo/client'\r\nimport { ALL_BOOKS, ME } from '../queries'\r\n\r\n\r\nconst Recommend = ({setError, show}) => {\r\n    const user = useQuery(ME)\r\n    console.log(user.data)\r\n    const genre = user.data?.me?.favouriteGenre\r\n    const result = useQuery(ALL_BOOKS, {\r\n        variables: { genre },\r\n        onError: (error) => {\r\n            console.log(error)\r\n            setError(error.message)\r\n        }\r\n    })\r\n\r\n    if (result.loading) {\r\n        return <div>loading...</div>\r\n    }\r\n\r\n    if (!show) {\r\n        return null\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2>Recommendations</h2>\r\n            books in your favourite genre <strong>{genre}</strong>\r\n            <table>\r\n                <tbody>\r\n                    <tr style={{ textAlign: \"left\" }}>\r\n                        <th>Title</th>\r\n                        <th>Author</th>\r\n                        <th>Published</th>\r\n                    </tr>\r\n                    {result.data?.allBooks.map(b =>\r\n                        <tr key={b.id}>\r\n                            <td>{b.title}</td>\r\n                            <td>{b.author?.name}</td>\r\n                            <td>{b.published}</td>\r\n                        </tr>\r\n                        )}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recommend\r\n","import React, { useState} from 'react'\r\nimport { useMutation } from '@apollo/client'\r\nimport { CREATE_USER } from '../queries'\r\n\r\n\r\nconst RegisterForm = ({ setError, show}) => {\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [favouriteGenre, setFavouriteGenre] = useState('')\r\n\r\n\r\n    const [ createUser, result ] = useMutation(CREATE_USER, {\r\n        onError: (error) => {\r\n            setError(error.graphQLErrors[0].message)\r\n        }\r\n    })\r\n\r\n\r\n    if (result.loading) {\r\n        return <div>loading...</div>\r\n    }\r\n\r\n    \r\n    if (!show) {\r\n        return null\r\n    }\r\n\r\n    const submit = async(event) => {\r\n        event.preventDefault()\r\n\r\n        createUser({ variables: {username, password, favouriteGenre} })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Register</h2>\r\n            <form onSubmit={submit}>\r\n                <div>\r\n                    username\r\n                    <input\r\n                    value={username}\r\n                    onChange={({target}) => setUsername(target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    password\r\n                    <input\r\n                    value={password}\r\n                    onChange={({target}) => setPassword(target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    favourite genre\r\n                    <input\r\n                    value={favouriteGenre}\r\n                    onChange={({target}) => setFavouriteGenre(target.value)}\r\n                    />\r\n                </div>\r\n                <button type='submit'>register</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RegisterForm;\r\n","import React, { useState } from 'react'\nimport Authors from './components/Authors'\nimport Books from './components/Books'\nimport NewBook from './components/NewBook'\nimport Notify from './components/Notify'\nimport LoginForm from './components/LoginForm'\nimport { useApolloClient, useSubscription } from '@apollo/client'\nimport Recommend from './components/Recommend'\nimport { ALL_BOOKS, BOOK_ADDED } from './queries'\nimport RegisterForm from './components/RegisterForm'\n\n\nconst App = () => {\n  const [page, setPage] = useState('authors')\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [token, setToken] = useState(null)\n  const client = useApolloClient()\n\n  const notify = (message) => {\n    setErrorMessage(message)\n    setTimeout(() => {\n      setErrorMessage(null)\n    }, 10000)\n  }\n\n  // Update addedBook in Apollo cache to render to screen immediately\n   const updateCacheWith = (addedBook) => {\n     // Check if addedBook exist in data\n    const includedIn = (set, object) => set.map(b => b.id).includes(object.id)\n    // If do not exist, add it\n     const dataInStore = client.readQuery({ query: ALL_BOOKS })\n   if (!includedIn(dataInStore.allBooks, addedBook)) {\n     client.writeQuery({\n       query: ALL_BOOKS,\n       data: { allBooks : dataInStore.allBooks.concat(addedBook)}\n     })\n   }\n   }\n\n   // Receive addedBook data from subscription\n  useSubscription(BOOK_ADDED, {\n    onSubscriptionData: ({ subscriptionData }) => {\n      const addedBook = subscriptionData.data.bookAdded\n      notify(`${addedBook.title} added`)\n      updateCacheWith(addedBook)\n    }\n  })\n\n    const logout = () => {\n      setToken(null)\n      localStorage.clear()\n      client.resetStore()\n    }\n\n  return (\n    <div>\n     <div>\n        <button onClick={() => setPage('authors')}>authors</button>\n        <button onClick={() => setPage('books')}>books</button>\n        <button onClick={() => setPage('register')}>register</button>\n        {token === null ? (<button onClick={() => setPage('login')}>login</button>)\n        : (<div><button onClick={() => setPage('add')}>add book</button>\n        <button onClick={() => setPage('recommend')}>recommend</button>\n        <button onClick={logout}>logout</button></div>\n        )}\n      </div>\n      <div>\n        <Notify errorMessage={errorMessage} />\n      </div>\n      <Authors\n        show={page === 'authors'}\n        setError={notify}\n      />\n\n      <Books\n        show={page === 'books'}\n        setError={notify}\n      />\n\n      <NewBook\n        show={page === 'add'}\n        setError={notify}\n        updateCacheWith={updateCacheWith}\n      />\n\n      <LoginForm\n          show={page === 'login'}\n          setToken={setToken}\n          setError={notify}\n          />\n\n      <RegisterForm\n          show={page === 'register'}\n          setError={notify}\n          />\n\n      <Recommend\n        show={page === 'recommend'}\n        setError={notify}\n        />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { ApolloClient, ApolloProvider,  HttpLink, InMemoryCache, split } from '@apollo/client'\nimport { setContext } from 'apollo-link-context'\n\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/client/link/ws'\n\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('bookuser-token')\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null,\n    }\n  }\n})\n\n// app HTTP connection\nconst httpLink = new HttpLink({ uri: '/graphql', credentials: 'include' })\n\n// WebSocket connection to GraphQL server\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:4000/graphql`,\n  options: {\n    reconnect: true\n  }\n})\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query)\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  authLink.concat(httpLink),\n)\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: splitLink\n})\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}